import { IProduct } from "src/interfaces/product/product";
import { MImage } from "../image";
import { MBrand } from "./brand";
import { MDescription } from "./description";
import { MProductDetail } from "./detail";
import { MMeasurementUnit } from "./measurementUnit";
import { MProductSubcategory } from "./subcategory";
import { MProductType } from "./type";
import { MProductCategory } from "./category";
import { MProductProperty } from "./productProperty";

export class MProduct {
    public id: number;
    public subcategoryId: number;
    public brandId: number;
    public typeId: number;
    public measurementUnitId: number;
    public name: string;
    public description: string;
    public status: boolean;
    public taxed: boolean;
    public tax: number;
    public percentageTaxed: number;
    public createdBy: number;
    public updatedBy: number;
    public createdAt: string;
    public updatedAt: string;
    public codes: string[];
    public category: MProductCategory;
    public subcategory: MProductSubcategory;
    public brand: MBrand;
    public type: MProductType;
    public measurementUnit: MMeasurementUnit;
    public properties: MProductProperty[];
    public descriptions: MDescription[];
    public details?: MProductDetail[];
    public images: MImage[];

    constructor(product: IProduct) {
        this.id = product.id;
        this.subcategoryId = product.subcategory_id;
        this.brandId = product.brand_id;
        this.typeId = product.type_id;
        this.measurementUnitId = product.measurement_unit_id;
        this.name = product.name;
        this.description = product.description;
        this.status = product.status;
        this.taxed = product.taxed;
        this.tax = product.tax;
        this.percentageTaxed = product.percentage_taxed;
        this.createdBy = product.created_by;
        this.updatedBy = product.updated_by;
        this.createdAt = product.created_at;
        this.updatedAt = product.updated_at;
        this.codes = product.codes;
        this.category = new MProductCategory(product.category);
        this.subcategory = new MProductSubcategory(product.subcategory);
        this.brand = new MBrand(product.brand);
        this.type = new MProductType(product.type);
        this.measurementUnit = new MMeasurementUnit(product.measurement_unit);
        this.properties = product.properties.map(property => new MProductProperty(property));
        this.descriptions = product.descriptions.map(description => new MDescription(description));
        this.details = product.details ? product.details.map(detail => new MProductDetail(detail)) : undefined;
        this.images = product.images.map(image => new MImage(image));
    };
};